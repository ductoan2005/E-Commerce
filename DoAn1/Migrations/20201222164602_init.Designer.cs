// <auto-generated />
using System;
using DoAn1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoAn1.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201222164602_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DoAn1.Models.CT_HoaDon", b =>
                {
                    b.Property<int>("CT_HoaDonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GioHangID")
                        .HasColumnType("int");

                    b.Property<int?>("HoaDonID")
                        .HasColumnType("int");

                    b.Property<int?>("LaptopID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Ngay")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.Property<int>("TongTien")
                        .HasColumnType("int");

                    b.HasKey("CT_HoaDonID");

                    b.HasIndex("GioHangID");

                    b.HasIndex("HoaDonID");

                    b.HasIndex("LaptopID");

                    b.ToTable("CT_HoaDon");
                });

            modelBuilder.Entity("DoAn1.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CmtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("KhachHangID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LaptopID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentID");

                    b.HasIndex("KhachHangID");

                    b.HasIndex("LaptopID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DoAn1.Models.GhiChu", b =>
                {
                    b.Property<int>("GhiChuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TenGhiChu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GhiChuID");

                    b.ToTable("GhiChu");
                });

            modelBuilder.Entity("DoAn1.Models.GioHang", b =>
                {
                    b.Property<int>("GioHangID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KhachHangID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LaptopID")
                        .HasColumnType("int");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.HasKey("GioHangID");

                    b.HasIndex("KhachHangID");

                    b.HasIndex("LaptopID");

                    b.ToTable("GioHang");
                });

            modelBuilder.Entity("DoAn1.Models.HoaDon", b =>
                {
                    b.Property<int>("HoaDonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GhiChuID")
                        .HasColumnType("int");

                    b.Property<string>("KhachHangID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Ngay")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherID")
                        .HasColumnType("int");

                    b.HasKey("HoaDonID");

                    b.HasIndex("GhiChuID");

                    b.HasIndex("KhachHangID");

                    b.HasIndex("VoucherID");

                    b.ToTable("HoaDon");
                });

            modelBuilder.Entity("DoAn1.Models.KhachHang", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiaChiKH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DienThoaiKH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenKH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TichDiem")
                        .HasColumnType("float");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DoAn1.Models.Laptop", b =>
                {
                    b.Property<int>("LaptopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Giatien")
                        .HasColumnType("int");

                    b.Property<string>("GioiThieu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.Property<string>("TenLaptop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThongSo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThuongHieuID")
                        .HasColumnType("int");

                    b.HasKey("LaptopID");

                    b.HasIndex("ThuongHieuID");

                    b.ToTable("Laptop");
                });

            modelBuilder.Entity("DoAn1.Models.LichSuMuaHang", b =>
                {
                    b.Property<int>("LichSuMuaHangID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HoaDonID")
                        .HasColumnType("int");

                    b.Property<int?>("LaptopID")
                        .HasColumnType("int");

                    b.HasKey("LichSuMuaHangID");

                    b.HasIndex("HoaDonID");

                    b.HasIndex("LaptopID");

                    b.ToTable("LichSuMuaHang");
                });

            modelBuilder.Entity("DoAn1.Models.ThuongHieu", b =>
                {
                    b.Property<int>("ThuongHieuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TenThuongHieu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThuongHieuID");

                    b.ToTable("ThuongHieu");
                });

            modelBuilder.Entity("DoAn1.Models.Voucher", b =>
                {
                    b.Property<int>("VoucherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("KhachHangID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaVoucher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NgayHetHan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.HasKey("VoucherID");

                    b.HasIndex("KhachHangID");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f3d17f7e-bf0a-4d6b-9e97-4c5ac8290086",
                            ConcurrencyStamp = "9fe9205b-7941-4eb4-aa5f-a8a7820d45f1",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "255586ff-bd32-479d-ab17-2220244c809b",
                            ConcurrencyStamp = "88cc2aba-228d-4554-94f0-cd1863c36f2d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DoAn1.Models.CT_HoaDon", b =>
                {
                    b.HasOne("DoAn1.Models.GioHang", "GioHang")
                        .WithMany("CT_HoaDons")
                        .HasForeignKey("GioHangID");

                    b.HasOne("DoAn1.Models.HoaDon", "HoaDon")
                        .WithMany("CT_HoaDons")
                        .HasForeignKey("HoaDonID");

                    b.HasOne("DoAn1.Models.Laptop", "Laptop")
                        .WithMany()
                        .HasForeignKey("LaptopID");
                });

            modelBuilder.Entity("DoAn1.Models.Comment", b =>
                {
                    b.HasOne("DoAn1.Models.KhachHang", "KhachHang")
                        .WithMany("Comments")
                        .HasForeignKey("KhachHangID");

                    b.HasOne("DoAn1.Models.Laptop", "Laptop")
                        .WithMany("Comments")
                        .HasForeignKey("LaptopID");
                });

            modelBuilder.Entity("DoAn1.Models.GioHang", b =>
                {
                    b.HasOne("DoAn1.Models.KhachHang", "KhachHang")
                        .WithMany()
                        .HasForeignKey("KhachHangID");

                    b.HasOne("DoAn1.Models.Laptop", "Laptop")
                        .WithMany("GioHangs")
                        .HasForeignKey("LaptopID");
                });

            modelBuilder.Entity("DoAn1.Models.HoaDon", b =>
                {
                    b.HasOne("DoAn1.Models.GhiChu", "GhiChu")
                        .WithMany("HoaDons")
                        .HasForeignKey("GhiChuID");

                    b.HasOne("DoAn1.Models.KhachHang", "KhachHang")
                        .WithMany("HoaDons")
                        .HasForeignKey("KhachHangID");

                    b.HasOne("DoAn1.Models.Voucher", "Voucher")
                        .WithMany("HoaDons")
                        .HasForeignKey("VoucherID");
                });

            modelBuilder.Entity("DoAn1.Models.Laptop", b =>
                {
                    b.HasOne("DoAn1.Models.ThuongHieu", "ThuongHieu")
                        .WithMany()
                        .HasForeignKey("ThuongHieuID");
                });

            modelBuilder.Entity("DoAn1.Models.LichSuMuaHang", b =>
                {
                    b.HasOne("DoAn1.Models.HoaDon", "HoaDon")
                        .WithMany("LichSuMuaHangs")
                        .HasForeignKey("HoaDonID");

                    b.HasOne("DoAn1.Models.Laptop", null)
                        .WithMany("LichSuMuaHangs")
                        .HasForeignKey("LaptopID");
                });

            modelBuilder.Entity("DoAn1.Models.Voucher", b =>
                {
                    b.HasOne("DoAn1.Models.KhachHang", "KhachHang")
                        .WithMany("Vouchers")
                        .HasForeignKey("KhachHangID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DoAn1.Models.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DoAn1.Models.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAn1.Models.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DoAn1.Models.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
